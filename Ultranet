<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cadastro de Clientes Telecom</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .form-icon {
            position: absolute;
            left: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: #9ca3af; /* gray-400 */
        }
        .form-input {
            padding-left: 2.5rem;
        }
        /* Custom scrollbar for better aesthetics */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #f1f5f9; /* slate-100 */
        }
        ::-webkit-scrollbar-thumb {
            background: #94a3b8; /* slate-400 */
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #64748b; /* slate-500 */
        }
        
        @media print {
            body.printing-customer-sheet > *:not(#print-area) {
                display: none !important;
            }
            #print-area {
                display: block !important;
            }
            .printable-sheet {
                page-break-after: always;
            }
            .printable-sheet:last-child {
                page-break-after: auto;
            }
        }
    </style>
</head>
<body class="bg-slate-100 text-slate-800">

    <div class="container mx-auto p-4 md:p-8">
        <header class="text-center mb-8">
            <h1 id="app-title" contenteditable="true" class="text-4xl md:text-5xl font-bold text-slate-900 outline-none focus:ring-2 focus:ring-blue-500 rounded-md">Gestão de Clientes Telecom</h1>
            <p id="app-slogan" contenteditable="true" class="text-lg text-slate-600 mt-2 outline-none focus:ring-2 focus:ring-blue-500 rounded-md">Cadastre, visualize e gerencie seus clientes com facilidade.</p>
        </header>

        <main class="space-y-8">
            <!-- Coluna do Formulário -->
            <div>
                <form id="customer-form" class="bg-white p-6 rounded-lg shadow-lg space-y-4 max-w-2xl mx-auto">
                    <h2 id="form-title" class="text-2xl font-semibold border-b pb-3 mb-4">Cadastrar Novo Cliente</h2>
                    
                    <input type="hidden" id="customer-id">
                    <input type="hidden" id="photo-data">

                    <div class="relative">
                        <label for="fullName" class="block text-sm font-medium text-slate-700 mb-1">🆔 Nome completo</label>
                        <input type="text" id="fullName" required class="form-input w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500" placeholder="Ex: João da Silva">
                    </div>
                    
                    <div class="relative">
                        <label for="nickname" class="block text-sm font-medium text-slate-700 mb-1">🏷 Apelido</label>
                        <input type="text" id="nickname" class="form-input w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500" placeholder="Ex: João">
                    </div>

                    <div class="relative">
                        <label for="cpf" class="block text-sm font-medium text-slate-700 mb-1">🪪 CPF</label>
                        <input type="text" id="cpf" required class="form-input w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500" placeholder="000.000.000-00">
                    </div>

                    <div class="relative">
                        <label for="birthDate" class="block text-sm font-medium text-slate-700 mb-1">🎂 Data de nascimento</label>
                        <input type="date" id="birthDate" class="w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500">
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="relative">
                            <label for="phone" class="block text-sm font-medium text-slate-700 mb-1">📞 Telefone</label>
                            <input type="tel" id="phone" class="form-input w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500" placeholder="(00) 0000-0000">
                        </div>
                        <div class="relative">
                            <label for="whatsapp" class="block text-sm font-medium text-slate-700 mb-1">💬 WhatsApp</label>
                            <input type="tel" id="whatsapp" class="form-input w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500" placeholder="(00) 00000-0000">
                        </div>
                    </div>

                    <div class="relative">
                        <label for="email" class="block text-sm font-medium text-slate-700 mb-1">✉ E-mail</label>
                        <input type="email" id="email" class="form-input w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500" placeholder="exemplo@email.com">
                    </div>

                    <div class="relative">
                        <label for="address" class="block text-sm font-medium text-slate-700 mb-1">🏡 Endereço</label>
                        <input type="text" id="address" class="form-input w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500" placeholder="Rua, Número, Bairro, Cidade">
                    </div>
                    
                    <div class="relative">
                        <label for="geolocation" class="flex items-center justify-between text-sm font-medium text-slate-700 mb-1">
                            <span>📍 Geolocalização</span>
                            <button type="button" id="get-location-btn" class="text-xs bg-slate-200 hover:bg-slate-300 text-slate-700 font-semibold py-1 px-2 rounded-md">Obter Localização</button>
                        </label>
                        <input type="text" id="geolocation" class="w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 bg-slate-50" placeholder="Clique em 'Obter Localização'">
                    </div>

                    <div class="relative">
                        <label for="reference" class="block text-sm font-medium text-slate-700 mb-1">📌 Ponto de referência</label>
                        <input type="text" id="reference" class="form-input w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500" placeholder="Próximo ao mercado X">
                    </div>

                    <div class="relative">
                        <label for="plan" class="block text-sm font-medium text-slate-700 mb-1">📃 Plano escolhido</label>
                        <select id="plan" class="w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500">
                            <!-- Planos carregados via JS -->
                        </select>
                        <input type="text" id="customPlan" class="hidden w-full p-2 border border-slate-300 rounded-md mt-2" placeholder="Digite o nome do plano">
                        <span id="plan-value" class="text-sm text-slate-500 mt-1 block"></span>
                    </div>
                    
                    <div class="relative">
                        <label for="devices" class="block text-sm font-medium text-slate-700 mb-1">📱 Quantos aparelhos conectados?</label>
                        <input type="number" id="devices" class="form-input w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500" placeholder="Ex: 5">
                    </div>
                    
                    <div class="relative">
                        <label for="freeTrial" class="block text-sm font-medium text-slate-700 mb-1">🎁 Teste grátis</label>
                        <select id="freeTrial" class="w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500">
                            <option value="nao">Não</option>
                            <option value="15_dias">15 dias</option>
                            <option value="1_mes">1 mês</option>
                            <option value="2_meses">2 meses</option>
                            <option value="3_meses">3 meses</option>
                        </select>
                    </div>
                    
                    <div class="relative">
                        <label for="dueDate" class="block text-sm font-medium text-slate-700 mb-1">🗓️ Data de Vencimento</label>
                        <select id="dueDate" class="w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500">
                            <option value="">Selecione o dia</option>
                            <option value="01">Dia 01</option>
                            <option value="10">Dia 10</option>
                            <option value="15">Dia 15</option>
                            <option value="20">Dia 20</option>
                        </select>
                    </div>

                    <div class="relative">
                        <label for="observations" class="block text-sm font-medium text-slate-700 mb-1">📝 OBS.:</label>
                        <textarea id="observations" class="w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500" rows="3" placeholder="Observações adicionais sobre o cliente ou instalação..."></textarea>
                    </div>

                    <div class="relative">
                        <label class="block text-sm font-medium text-slate-700 mb-1">📸 Foto (Documento/Fachada)</label>
                        <div class="flex items-center gap-4">
                            <input type="file" id="photo-input" class="hidden" accept="image/*" capture="environment">
                            <button type="button" id="take-photo-btn" class="bg-slate-200 hover:bg-slate-300 text-slate-700 font-semibold py-2 px-4 rounded-md">Tirar Foto</button>
                            <img id="photo-preview" src="" class="w-24 h-24 rounded-md object-cover hidden">
                            <button type="button" id="remove-photo-btn" class="hidden text-red-500 hover:text-red-700 text-2xl font-bold">&times;</button>
                        </div>
                    </div>


                    <div class="flex items-center gap-4 pt-4 border-t">
                        <button type="submit" id="save-btn" class="w-full bg-blue-600 text-white font-bold py-2 px-4 rounded-md hover:bg-blue-700 transition-colors">Salvar Cliente</button>
                        <button type="button" id="clear-btn" class="w-full bg-slate-200 text-slate-800 font-bold py-2 px-4 rounded-md hover:bg-slate-300 transition-colors">Limpar</button>
                    </div>
                </form>
            </div>

            <!-- Coluna da Lista de Clientes -->
            <div>
                <div class="bg-white p-6 rounded-lg shadow-lg">
                    <div class="flex flex-wrap justify-between items-center mb-4 gap-4">
                        <h2 class="text-2xl font-semibold">Clientes Cadastrados</h2>
                    </div>
                    <div class="relative mb-4">
                         <span class="form-icon">🔍</span>
                        <input type="text" id="search" class="form-input w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500" placeholder="Buscar por nome, apelido ou CPF...">
                    </div>
                    <div id="customer-list" class="space-y-3 max-h-[70vh] overflow-y-auto pr-2">
                        <!-- Clientes serão inseridos aqui -->
                    </div>
                    <div class="flex flex-col sm:flex-row items-center gap-2 border-t pt-4 mt-4">
                        <button id="manage-plans-btn" class="w-full sm:w-auto bg-purple-600 text-white font-bold py-2 px-4 rounded-md hover:bg-purple-700 transition-colors text-sm">Gerenciar Planos</button>
                        <button id="backup-btn" class="w-full sm:w-auto bg-blue-800 text-white font-bold py-2 px-4 rounded-md hover:bg-blue-900 transition-colors text-sm">Backup</button>
                        <button id="restore-btn" class="w-full sm:w-auto bg-slate-600 text-white font-bold py-2 px-4 rounded-md hover:bg-slate-700 transition-colors text-sm">Restaurar</button>
                        <button id="print-all-btn" class="w-full sm:w-auto bg-gray-700 text-white font-bold py-2 px-4 rounded-md hover:bg-gray-800 transition-colors text-sm">Imprimir Tudo</button>
                        <button id="share-all-btn" class="w-full sm:w-auto bg-green-600 text-white font-bold py-2 px-4 rounded-md hover:bg-green-700 transition-colors text-sm">Compartilhar Relatório</button>
                    </div>
                </div>
            </div>
        </main>
        <footer class="text-center mt-12 py-4 border-t border-slate-200">
            <h3 class="font-semibold text-slate-800">Suporte e Contato</h3>
            <p class="text-slate-600 text-sm mt-2">Para dúvidas ou sugestões, entre em contato:</p>
            <a href="https://wa.me/5575998312170" target="_blank" class="text-blue-600 hover:text-blue-800 inline-flex items-center justify-center mt-2 font-bold">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 24 24"><path d="M.057 24l1.687-6.163c-1.041-1.804-1.588-3.849-1.587-5.946.003-6.556 5.338-11.891 11.893-11.891 3.181.001 6.167 1.24 8.413 3.488 2.245 2.248 3.481 5.236 3.48 8.414-.003 6.557-5.338 11.892-11.894 11.892-1.99-.001-3.951-.5-5.688-1.448l-6.305 1.654zm6.597-3.807c1.676.995 3.276 1.591 5.392 1.592 5.448 0 9.886-4.434 9.889-9.885.002-5.462-4.415-9.89-9.881-9.892-5.452 0-9.887 4.434-9.889 9.886-.001 2.269.654 4.502 1.905 6.344l-1.225 4.485 4.653-1.222zM8.053 7.331c-.162-.375-.527-.456-.74-.465-.213-.01-.444-.01-.675-.01-.272 0-.686.095-.994.465-.309.369-1.206 1.176-1.206 2.867 0 1.691 1.237 3.328 1.405 3.554.169.227 2.373 3.659 5.728 5.053 2.879 1.144 3.353 1.054 3.935.955.582-.099 1.834-.75 2.096-1.469.262-.719.262-1.335.183-1.469-.079-.134-.309-.214-.618-.369-.309-.155-1.834-.906-2.115-1.012-.282-.106-.487-.155-.693.155-.205.309-.798.906-.979 1.096-.181.19-.362.219-.618.064-.256-.155-1.076-.395-2.048-1.272-1.524-1.378-1.834-1.666-1.834-1.892.079-.227.182-.369.272-.464.09-.095.205-.24.309-.369.104-.13.155-.213.234-.368.079-.155.039-.282-.019-.418-.058-.134-.693-1.666-.924-2.279z"/></svg>
                +55 75 99831-2170
            </a>
            <p class="text-xs text-slate-500 mt-4">Desenvolvido por Jânio Carlos &copy; 2025</p>
        </footer>
    </div>

    <!-- Modal de Confirmação de Exclusão -->
    <div id="delete-modal" class="hidden fixed inset-0 bg-black/50 z-50 items-center justify-center">
        <div class="bg-white p-6 rounded-lg shadow-xl text-center max-w-sm mx-4">
            <h3 class="text-xl font-bold mb-4">Confirmar Exclusão</h3>
            <p class="text-slate-600 mb-6">Você tem certeza que deseja excluir este cliente? Esta ação não pode ser desfeita.</p>
            <div class="flex gap-4">
                <button id="confirm-delete-btn" class="w-full bg-red-600 text-white font-bold py-2 px-4 rounded-md hover:bg-red-700 transition-colors">Excluir</button>
                <button id="cancel-delete-btn" class="w-full bg-slate-200 text-slate-800 font-bold py-2 px-4 rounded-md hover:bg-slate-300 transition-colors">Cancelar</button>
            </div>
        </div>
    </div>
    
    <!-- Modal de Gerenciamento de Planos -->
    <div id="plans-modal" class="hidden fixed inset-0 bg-black/50 z-50 items-center justify-center">
        <div class="bg-white p-6 rounded-lg shadow-xl w-full max-w-lg mx-4">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-bold">Gerenciar Planos e Valores</h3>
                <button id="close-plans-modal-btn" class="text-2xl font-bold">&times;</button>
            </div>
            <div id="plans-list" class="space-y-2 max-h-64 overflow-y-auto mb-4 pr-2">
                <!-- Lista de planos será inserida aqui -->
            </div>
            <div class="flex justify-between items-center border-t pt-4">
                 <button id="add-plan-btn" class="bg-green-600 text-white font-bold py-2 px-4 rounded-md hover:bg-green-700 transition-colors">Adicionar Plano</button>
                 <button id="save-plans-btn" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-md hover:bg-blue-700 transition-colors">Salvar Alterações</button>
            </div>
        </div>
    </div>
    
    <!-- Área de Impressão (invisível) -->
    <div id="print-area" class="hidden"></div>
    
    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const customerForm = document.getElementById('customer-form');
        const formTitle = document.getElementById('form-title');
        const customerList = document.getElementById('customer-list');
        const searchInput = document.getElementById('search');
        const saveBtn = document.getElementById('save-btn');
        const clearBtn = document.getElementById('clear-btn');
        const customerIdInput = document.getElementById('customer-id');
        
        const deleteModal = document.getElementById('delete-modal');
        const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
        const cancelDeleteBtn = document.getElementById('cancel-delete-btn');
        
        const backupBtn = document.getElementById('backup-btn');
        const restoreBtn = document.getElementById('restore-btn');
        const printArea = document.getElementById('print-area');
        
        const plansModal = document.getElementById('plans-modal');
        const managePlansBtn = document.getElementById('manage-plans-btn');
        const closePlansModalBtn = document.getElementById('close-plans-modal-btn');
        const plansList = document.getElementById('plans-list');
        const addPlanBtn = document.getElementById('add-plan-btn');
        const savePlansBtn = document.getElementById('save-plans-btn');
        const printAllBtn = document.getElementById('print-all-btn');
        const shareAllBtn = document.getElementById('share-all-btn');

        let customerToDeleteId = null;

        const cpfInput = document.getElementById('cpf');
        const phoneInput = document.getElementById('phone');
        const whatsappInput = document.getElementById('whatsapp');
        const planSelect = document.getElementById('plan');
        const customPlanInput = document.getElementById('customPlan');
        const planValueSpan = document.getElementById('plan-value');
        const getLocationBtn = document.getElementById('get-location-btn');
        const geolocationInput = document.getElementById('geolocation');
        const takePhotoBtn = document.getElementById('take-photo-btn');
        const photoInput = document.getElementById('photo-input');
        const photoPreview = document.getElementById('photo-preview');
        const removePhotoBtn = document.getElementById('remove-photo-btn');
        const photoDataInput = document.getElementById('photo-data');
        const dueDateSelect = document.getElementById('dueDate');


        // --- Máscaras de Input ---
        const maskCpf = (value) => {
            return value
                .replace(/\D/g, '')
                .replace(/(\d{3})(\d)/, '$1.$2')
                .replace(/(\d{3})(\d)/, '$1.$2')
                .replace(/(\d{3})(\d{1,2})/, '$1-$2')
                .substring(0, 14);
        };
        
        const maskPhone = (value) => {
            return value
                .replace(/\D/g, '')
                .replace(/(\d{2})(\d)/, '($1) $2')
                .replace(/(\d{4})(\d)/, '$1-$2')
                .substring(0, 14);
        };
        
        const maskWhatsapp = (value) => {
             return value
                .replace(/\D/g, '')
                .replace(/(\d{2})(\d)/, '($1) $2')
                .replace(/(\d{5})(\d)/, '$1-$2')
                .substring(0, 15);
        };
        
        cpfInput.addEventListener('input', (e) => { e.target.value = maskCpf(e.target.value); });
        phoneInput.addEventListener('input', (e) => { e.target.value = maskPhone(e.target.value); });
        whatsappInput.addEventListener('input', (e) => { e.target.value = maskWhatsapp(e.target.value); });

        // --- Funções de Dados ---
        const getCustomers = () => JSON.parse(localStorage.getItem('telecom_customers')) || [];
        const setCustomers = (customers) => localStorage.setItem('telecom_customers', JSON.stringify(customers));
        const getPlans = () => {
            const plans = localStorage.getItem('telecom_plans');
            if (plans) {
                return JSON.parse(plans);
            }
            // Default plans
            return [
                { id: '85_mega', name: 'Fibra 85 Mega', value: 64.99 },
                { id: '175_mega', name: 'Fibra 175 Mega', value: 74.99 },
                { id: '375_mega', name: 'Fibra 375 Mega', value: 84.99 },
                { id: '525_mega', name: 'Fibra 525 Mega', value: 99.99 },
                { id: '1_giga', name: 'Fibra 1 Giga', value: 189.99 }
            ];
        };
        const setPlans = (plans) => localStorage.setItem('telecom_plans', JSON.stringify(plans));

        const getAppSettings = () => JSON.parse(localStorage.getItem('telecom_settings')) || {
            title: 'Gestão de Clientes Telecom',
            slogan: 'Cadastre, visualize e gerencie seus clientes com facilidade.'
        };
        const setAppSettings = (settings) => localStorage.setItem('telecom_settings', JSON.stringify(settings));

        const renderCustomers = (filter = '') => {
            customerList.innerHTML = '';
            const customers = getCustomers();
            const filteredCustomers = customers.filter(c =>
                c.fullName.toLowerCase().includes(filter.toLowerCase()) ||
                (c.nickname && c.nickname.toLowerCase().includes(filter.toLowerCase())) ||
                c.cpf.includes(filter)
            );

            if (filteredCustomers.length === 0) {
                customerList.innerHTML = `<p class="text-slate-500 text-center py-4">Nenhum cliente encontrado.</p>`;
                return;
            }

            filteredCustomers.forEach(customer => {
                const customerDiv = document.createElement('div');
                customerDiv.className = 'bg-slate-50 p-4 rounded-lg border border-slate-200 flex flex-col';
                customerDiv.innerHTML = `
                    <div class="flex-grow">
                        <h3 class="font-bold text-lg text-blue-600">${customer.fullName} ${customer.nickname ? `(${customer.nickname})` : ''}</h3>
                        <p class="text-sm text-slate-600">🪪 ${customer.cpf}</p>
                        <p class="text-sm text-slate-600">📞 ${customer.phone || 'Não informado'}</p>
                    </div>
                    <div class="flex gap-2 justify-end mt-4 pt-4 border-t border-slate-200">
                         <button class="share-btn text-green-500 hover:text-green-700" data-id="${customer.id}" title="Compartilhar no WhatsApp">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24"><path d="M.057 24l1.687-6.163c-1.041-1.804-1.588-3.849-1.587-5.946.003-6.556 5.338-11.891 11.893-11.891 3.181.001 6.167 1.24 8.413 3.488 2.245 2.248 3.481 5.236 3.48 8.414-.003 6.557-5.338 11.892-11.894 11.892-1.99-.001-3.951-.5-5.688-1.448l-6.305 1.654zm6.597-3.807c1.676.995 3.276 1.591 5.392 1.592 5.448 0 9.886-4.434 9.889-9.885.002-5.462-4.415-9.89-9.881-9.892-5.452 0-9.887 4.434-9.889 9.886-.001 2.269.654 4.502 1.905 6.344l-1.225 4.485 4.653-1.222zM8.053 7.331c-.162-.375-.527-.456-.74-.465-.213-.01-.444-.01-.675-.01-.272 0-.686.095-.994.465-.309.369-1.206 1.176-1.206 2.867 0 1.691 1.237 3.328 1.405 3.554.169.227 2.373 3.659 5.728 5.053 2.879 1.144 3.353 1.054 3.935.955.582-.099 1.834-.75 2.096-1.469.262-.719.262-1.335.183-1.469-.079-.134-.309-.214-.618-.369-.309-.155-1.834-.906-2.115-1.012-.282-.106-.487-.155-.693.155-.205.309-.798.906-.979 1.096-.181.19-.362.219-.618.064-.256-.155-1.076-.395-2.048-1.272-1.524-1.378-1.834-1.666-1.834-1.892.079-.227.182-.369.272-.464.09-.095.205-.24.309-.369.104-.13.155-.213.234-.368.079-.155.039-.282-.019-.418-.058-.134-.693-1.666-.924-2.279z"/></svg>
                            </button>
                             <button class="print-btn text-gray-500 hover:text-gray-700" data-id="${customer.id}" title="Imprimir / Salvar PDF">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M5 4v3H4a2 2 0 00-2 2v6a2 2 0 002 2h12a2 2 0 002-2V9a2 2 0 00-2-2h-1V4a2 2 0 00-2-2H7a2 2 0 00-2 2zm8 0H7v3h6V4zM4 9h12v6H4V9z" clip-rule="evenodd" /></svg>
                            </button>
                            <button class="edit-btn text-blue-500 hover:text-blue-700" data-id="${customer.id}" title="Editar">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" /><path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" /></svg>
                            </button>
                            <button class="delete-btn text-red-500 hover:text-red-700" data-id="${customer.id}" title="Excluir">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" /></svg>
                            </button>
                        </div>
                    </div>
                `;
                customerList.appendChild(customerDiv);
            });
        };

        const clearForm = () => {
            customerForm.reset();
            customerIdInput.value = '';
            formTitle.textContent = 'Cadastrar Novo Cliente';
            saveBtn.textContent = 'Salvar Cliente';
            saveBtn.classList.remove('bg-green-600', 'hover:bg-green-700');
            saveBtn.classList.add('bg-blue-600', 'hover:bg-blue-700');
            customPlanInput.classList.add('hidden');
            customPlanInput.value = '';
            planValueSpan.textContent = '';
            geolocationInput.value = '';
            document.getElementById('devices').value = '';
            document.getElementById('freeTrial').value = 'nao';
            document.getElementById('observations').value = '';
            document.getElementById('dueDate').value = '';
            photoDataInput.value = '';
            photoPreview.src = '';
            photoPreview.classList.add('hidden');
            removePhotoBtn.classList.add('hidden');
        };
        
        const showDeleteModal = (id) => {
            customerToDeleteId = id;
            deleteModal.style.display = 'flex';
        };
        
        const hideDeleteModal = () => {
            customerToDeleteId = null;
            deleteModal.style.display = 'none';
        };
        
        // --- Funções de Planos ---
        const populatePlansDropdown = () => {
            const plans = getPlans();
            planSelect.innerHTML = `<option value="">Selecione um plano</option>`;
            plans.forEach(plan => {
                const option = document.createElement('option');
                option.value = plan.id;
                option.textContent = `${plan.name} - R$ ${plan.value.toFixed(2)}`;
                planSelect.appendChild(option);
            });
            planSelect.innerHTML += `<option value="outro">Outro (especificar)</option>`;
        };

        const renderPlansModal = () => {
            plansList.innerHTML = '';
            const plans = getPlans();
            plans.forEach(plan => {
                const planDiv = document.createElement('div');
                planDiv.className = 'flex items-center gap-2';
                planDiv.dataset.id = plan.id;
                planDiv.innerHTML = `
                    <input type="text" value="${plan.name}" class="plan-name-input flex-grow p-1 border rounded-md" placeholder="Nome do Plano">
                    <input type="number" step="0.01" value="${plan.value.toFixed(2)}" class="plan-value-input w-24 p-1 border rounded-md" placeholder="Valor">
                    <button class="delete-plan-btn text-red-500 hover:text-red-700 font-bold text-xl">&times;</button>
                `;
                plansList.appendChild(planDiv);
            });
        };

        // --- Event Listeners ---
        planSelect.addEventListener('change', () => {
            if (planSelect.value === 'outro') {
                customPlanInput.classList.remove('hidden');
                planValueSpan.textContent = '';
            } else {
                customPlanInput.classList.add('hidden');
                const selectedPlan = getPlans().find(p => p.id === planSelect.value);
                if (selectedPlan) {
                    planValueSpan.textContent = `Valor: R$ ${selectedPlan.value.toFixed(2)}`;
                } else {
                    planValueSpan.textContent = '';
                }
            }
        });

        customerForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const id = customerIdInput.value;
            const customers = getCustomers();
            
            const selectedPlan = getPlans().find(p => p.id === planSelect.value);
            let planText = '';
            let planValue = 0;

            if (planSelect.value === 'outro') {
                planText = customPlanInput.value;
            } else if (selectedPlan) {
                planText = selectedPlan.name;
                planValue = selectedPlan.value;
            }

            const newCustomer = {
                id: id ? id : Date.now().toString(),
                fullName: document.getElementById('fullName').value,
                nickname: document.getElementById('nickname').value,
                cpf: document.getElementById('cpf').value,
                birthDate: document.getElementById('birthDate').value,
                phone: document.getElementById('phone').value,
                whatsapp: document.getElementById('whatsapp').value,
                email: document.getElementById('email').value,
                address: document.getElementById('address').value,
                geolocation: document.getElementById('geolocation').value,
                reference: document.getElementById('reference').value,
                plan: planSelect.value,
                planText: planText,
                planValue: planValue,
                devices: document.getElementById('devices').value,
                freeTrial: document.getElementById('freeTrial').value,
                dueDate: document.getElementById('dueDate').value,
                observations: document.getElementById('observations').value,
                photo: photoDataInput.value
            };

            if (id) {
                const index = customers.findIndex(c => c.id === id);
                customers[index] = newCustomer;
            } else {
                customers.push(newCustomer);
            }
            setCustomers(customers);
            renderCustomers(searchInput.value);
            clearForm();
        });

        clearBtn.addEventListener('click', clearForm);

        searchInput.addEventListener('input', (e) => renderCustomers(e.target.value));

        customerList.addEventListener('click', (e) => {
            const editBtn = e.target.closest('.edit-btn');
            const deleteBtn = e.target.closest('.delete-btn');
            const shareBtn = e.target.closest('.share-btn');
            const printBtn = e.target.closest('.print-btn');

            if (editBtn) {
                const id = editBtn.dataset.id;
                const customer = getCustomers().find(c => c.id === id);
                
                customerIdInput.value = customer.id;
                document.getElementById('fullName').value = customer.fullName;
                document.getElementById('nickname').value = customer.nickname;
                document.getElementById('cpf').value = customer.cpf;
                document.getElementById('birthDate').value = customer.birthDate;
                document.getElementById('phone').value = customer.phone;
                document.getElementById('whatsapp').value = customer.whatsapp;
                document.getElementById('email').value = customer.email;
                document.getElementById('address').value = customer.address;
                document.getElementById('geolocation').value = customer.geolocation || '';
                document.getElementById('reference').value = customer.reference;
                planSelect.value = customer.plan;
                document.getElementById('devices').value = customer.devices || '';
                document.getElementById('freeTrial').value = customer.freeTrial || 'nao';
                document.getElementById('dueDate').value = customer.dueDate || '';
                document.getElementById('observations').value = customer.observations || '';
                photoDataInput.value = customer.photo || '';
                
                if(customer.photo) {
                    photoPreview.src = customer.photo;
                    photoPreview.classList.remove('hidden');
                    removePhotoBtn.classList.remove('hidden');
                } else {
                    photoPreview.src = '';
                    photoPreview.classList.add('hidden');
                    removePhotoBtn.classList.add('hidden');
                }

                planSelect.dispatchEvent(new Event('change'));

                if (customer.plan === 'outro') {
                    customPlanInput.value = customer.planText;
                }
                
                formTitle.textContent = 'Editar Cliente';
                saveBtn.textContent = 'Atualizar Cliente';
                saveBtn.classList.add('bg-green-600', 'hover:bg-green-700');
                
                window.scrollTo({ top: 0, behavior: 'smooth' });
            }

            if (deleteBtn) {
                const id = deleteBtn.dataset.id;
                showDeleteModal(id);
            }
            
            if (shareBtn) {
                const id = shareBtn.dataset.id;
                const customer = getCustomers().find(c => c.id === id);
                const planInfo = customer.plan === 'outro' 
                    ? customer.planText 
                    : `${customer.planText} - R$ ${customer.planValue.toFixed(2)}`;
                const freeTrialText = customer.freeTrial && customer.freeTrial !== 'nao' ? document.querySelector(`#freeTrial option[value="${customer.freeTrial}"]`).textContent : 'Não';
                const settings = getAppSettings();

                const message = `*${settings.title}*%0A%0A` +
                                `*Ficha do Cliente*%0A%0A` +
                                `🆔 *Nome completo:* ${customer.fullName}%0A` +
                                `🏷 *Apelido:* ${customer.nickname || 'N/A'}%0A` +
                                `🪪 *CPF:* ${customer.cpf}%0A` +
                                `🎂 *Data de nascimento:* ${customer.birthDate ? new Date(customer.birthDate + 'T00:00:00').toLocaleDateString('pt-BR') : 'N/A'}%0A` +
                                `📞 *Telefone:* ${customer.phone || 'N/A'}%0A` +
                                `💬 *WhatsApp:* ${customer.whatsapp || 'N/A'}%0A` +
                                `✉ *E-mail:* ${customer.email || 'N/A'}%0A` +
                                `🏡 *Endereço:* ${customer.address || 'N/A'}%0A` +
                                `📍 *Geolocalização:* ${customer.geolocation || 'N/A'}%0A` +
                                `📌 *Ponto de referência:* ${customer.reference || 'N/A'}%0A` +
                                `📃 *Plano escolhido:* ${planInfo || 'N/A'}%0A` +
                                `📱 *Aparelhos conectados:* ${customer.devices || 'N/A'}%0A` +
                                `🎁 *Teste grátis:* ${freeTrialText}%0A` +
                                `🗓️ *Vencimento:* Dia ${customer.dueDate || 'N/A'}%0A` +
                                `📝 *OBS.:* ${customer.observations || 'N/A'}` +
                                `${customer.photo ? '%0A📸 *Foto Anexada:* Sim' : ''}`;
                
                window.open(`https://api.whatsapp.com/send?text=${message}`, '_blank');
            }
            
            if (printBtn) {
                const id = printBtn.dataset.id;
                const customer = getCustomers().find(c => c.id === id);
                printArea.innerHTML = generateCustomerSheetHTML(customer);
                document.body.classList.add('printing-customer-sheet');
                window.print();
                document.body.classList.remove('printing-customer-sheet');
            }
        });
        
        confirmDeleteBtn.addEventListener('click', () => {
            let customers = getCustomers();
            customers = customers.filter(c => c.id !== customerToDeleteId);
            setCustomers(customers);
            renderCustomers(searchInput.value);
            hideDeleteModal();
        });
        
        cancelDeleteBtn.addEventListener('click', hideDeleteModal);

        backupBtn.addEventListener('click', () => {
            const customers = getCustomers();
            if (customers.length === 0) {
                alert('Não há clientes para fazer backup.');
                return;
            }
            const dataToBackup = {
                customers: customers,
                plans: getPlans(),
                settings: getAppSettings()
            };
            const dataStr = JSON.stringify(dataToBackup, null, 2);
            const blob = new Blob([dataStr], {type: 'application/json'});
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'backup_clientes_telecom.json';
            a.click();
            URL.revokeObjectURL(url);
        });

        restoreBtn.addEventListener('click', () => {
            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.accept = '.json';
            fileInput.onchange = (e) => {
                const file = e.target.files[0];
                if (!file) return;
                const reader = new FileReader();
                reader.onload = (event) => {
                    try {
                        const restoredData = JSON.parse(event.target.result);
                        if (confirm('Isso substituirá todos os dados atuais. Deseja continuar?')) {
                            if (Array.isArray(restoredData.customers)) {
                                setCustomers(restoredData.customers);
                            }
                            if (Array.isArray(restoredData.plans)) {
                                setPlans(restoredData.plans);
                                populatePlansDropdown();
                            }
                            if (restoredData.settings) {
                                setAppSettings(restoredData.settings);
                                document.getElementById('app-title').textContent = restoredData.settings.title;
                                document.getElementById('app-slogan').textContent = restoredData.settings.slogan;
                            }
                            renderCustomers();
                            alert('Dados restaurados com sucesso!');
                        }
                    } catch (err) {
                        alert('Erro ao ler o arquivo de backup.');
                    }
                };
                reader.readAsText(file);
            };
            fileInput.click();
        });

        // --- Event Listeners dos Planos ---
        managePlansBtn.addEventListener('click', () => {
            renderPlansModal();
            plansModal.style.display = 'flex';
        });

        closePlansModalBtn.addEventListener('click', () => {
            plansModal.style.display = 'none';
        });

        addPlanBtn.addEventListener('click', () => {
            const planDiv = document.createElement('div');
            planDiv.className = 'flex items-center gap-2';
            planDiv.dataset.id = `new_${Date.now()}`;
            planDiv.innerHTML = `
                <input type="text" class="plan-name-input flex-grow p-1 border rounded-md" placeholder="Nome do Plano">
                <input type="number" step="0.01" class="plan-value-input w-24 p-1 border rounded-md" placeholder="Valor">
                <button class="delete-plan-btn text-red-500 hover:text-red-700 font-bold text-xl">&times;</button>
            `;
            plansList.appendChild(planDiv);
        });

        plansList.addEventListener('click', (e) => {
            if (e.target.closest('.delete-plan-btn')) {
                e.target.closest('.flex').remove();
            }
        });
        
        savePlansBtn.addEventListener('click', () => {
            const newPlans = [];
            const planRows = plansList.querySelectorAll('.flex');
            planRows.forEach(row => {
                const nameInput = row.querySelector('.plan-name-input');
                const valueInput = row.querySelector('.plan-value-input');
                if (nameInput.value && valueInput.value) {
                    newPlans.push({
                        id: row.dataset.id.startsWith('new_') ? nameInput.value.toLowerCase().replace(/\s+/g, '_') : row.dataset.id,
                        name: nameInput.value,
                        value: parseFloat(valueInput.value)
                    });
                }
            });
            setPlans(newPlans);
            populatePlansDropdown();
            alert('Planos salvos com sucesso!');
            plansModal.style.display = 'none';
        });
        
        // --- Geolocalização ---
        getLocationBtn.addEventListener('click', () => {
            if ("geolocation" in navigator) {
                geolocationInput.value = "Obtendo localização...";
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const lat = position.coords.latitude;
                        const lon = position.coords.longitude;
                        const mapsLink = `https://www.google.com/maps?q=${lat},${lon}`;
                        geolocationInput.value = mapsLink;
                    },
                    (error) => {
                        let errorMessage = "Não foi possível obter a localização.";
                        switch(error.code) {
                            case error.PERMISSION_DENIED:
                                errorMessage = "Permissão de localização negada.";
                                break;
                            case error.POSITION_UNAVAILABLE:
                                errorMessage = "Informação de localização indisponível.";
                                break;
                            case error.TIMEOUT:
                                errorMessage = "Tempo esgotado para obter localização.";
                                break;
                        }
                        geolocationInput.value = errorMessage;
                    }
                );
            } else {
                geolocationInput.value = "Geolocalização não suportada neste navegador.";
            }
        });
        
        const generateCustomerSheetHTML = (customer) => {
            const planInfo = customer.plan === 'outro' 
                ? customer.planText 
                : `${customer.planText} - R$ ${customer.planValue.toFixed(2)}`;
            const freeTrialText = customer.freeTrial && customer.freeTrial !== 'nao' ? document.querySelector(`#freeTrial option[value="${customer.freeTrial}"]`).textContent : 'Não';
            const settings = getAppSettings();

            return `
                <div class="printable-sheet p-8">
                    <h1 class="text-3xl font-bold mb-6 border-b pb-4">${settings.title}</h1>
                    <div class="space-y-3 text-lg">
                        <p><strong>🆔 Nome completo:</strong> ${customer.fullName}</p>
                        <p><strong>🏷 Apelido:</strong> ${customer.nickname || 'N/A'}</p>
                        <p><strong>🪪 CPF:</strong> ${customer.cpf}</p>
                        <p><strong>🎂 Data de nascimento:</strong> ${customer.birthDate ? new Date(customer.birthDate + 'T00:00:00').toLocaleDateString('pt-BR') : 'N/A'}</p>
                        <p><strong>📞 Telefone:</strong> ${customer.phone || 'N/A'}</p>
                        <p><strong>💬 WhatsApp:</strong> ${customer.whatsapp || 'N/A'}</p>
                        <p><strong>✉ E-mail:</strong> ${customer.email || 'N/A'}</p>
                        <p><strong>🏡 Endereço:</strong> ${customer.address || 'N/A'}</p>
                        <p><strong>📍 Geolocalização:</strong> <a href="${customer.geolocation}" target="_blank">${customer.geolocation || 'N/A'}</a></p>
                        <p><strong>📌 Ponto de referência:</strong> ${customer.reference || 'N/A'}</p>
                        <p><strong>📃 Plano escolhido:</strong> ${planInfo || 'N/A'}</p>
                        <p><strong>📱 Aparelhos conectados:</strong> ${customer.devices || 'N/A'}</p>
                        <p><strong>🎁 Teste grátis:</strong> ${freeTrialText}</p>
                        <p><strong>🗓️ Vencimento:</strong> Dia ${customer.dueDate || 'N/A'}</p>
                        <p><strong>📝 OBS.:</strong> ${customer.observations || 'N/A'}</p>
                        ${customer.photo ? `<div class="mt-4"><p><strong>📸 Foto:</strong></p><img src="${customer.photo}" class="w-full max-w-sm mx-auto mt-2 rounded-md border"></div>` : ''}
                    </div>
                </div>
            `;
        }
        
        printAllBtn.addEventListener('click', () => {
            const customers = getCustomers();
            if (customers.length === 0) {
                alert('Não há clientes para imprimir.');
                return;
            }
            
            let allCustomersHTML = '';
            customers.forEach(customer => {
                allCustomersHTML += generateCustomerSheetHTML(customer);
            });

            printArea.innerHTML = allCustomersHTML;
            document.body.classList.add('printing-customer-sheet');
            window.print();
            document.body.classList.remove('printing-customer-sheet');
        });

        shareAllBtn.addEventListener('click', () => {
            const customers = getCustomers();
            if (customers.length === 0) {
                alert('Não há clientes para compartilhar.');
                return;
            }
            
            const settings = getAppSettings();
            let reportText = `*${settings.title.toUpperCase()}*%0A%0A`;
            customers.forEach((customer, index) => {
                const planInfo = customer.plan === 'outro' 
                    ? customer.planText 
                    : `${customer.planText} - R$ ${customer.planValue.toFixed(2)}`;
                const freeTrialText = customer.freeTrial && customer.freeTrial !== 'nao' ? document.querySelector(`#freeTrial option[value="${customer.freeTrial}"]`).textContent : 'Não';

                reportText += `*Cliente ${index + 1}*%0A` +
                                `🆔 *Nome completo:* ${customer.fullName}%0A` +
                                `🏷 *Apelido:* ${customer.nickname || 'N/A'}%0A` +
                                `🪪 *CPF:* ${customer.cpf}%0A` +
                                `🎂 *Data de nascimento:* ${customer.birthDate ? new Date(customer.birthDate + 'T00:00:00').toLocaleDateString('pt-BR') : 'N/A'}%0A` +
                                `📞 *Telefone:* ${customer.phone || 'N/A'}%0A` +
                                `💬 *WhatsApp:* ${customer.whatsapp || 'N/A'}%0A` +
                                `✉ *E-mail:* ${customer.email || 'N/A'}%0A` +
                                `🏡 *Endereço:* ${customer.address || 'N/A'}%0A` +
                                `📍 *Geolocalização:* ${customer.geolocation || 'N/A'}%0A` +
                                `📌 *Ponto de referência:* ${customer.reference || 'N/A'}%0A` +
                                `📃 *Plano escolhido:* ${planInfo || 'N/A'}%0A` +
                                `📱 *Aparelhos conectados:* ${customer.devices || 'N/A'}%0A` +
                                `🎁 *Teste grátis:* ${freeTrialText}%0A` +
                                `🗓️ *Vencimento:* Dia ${customer.dueDate || 'N/A'}%0A` +
                                `📝 *OBS.:* ${customer.observations || 'N/A'}%0A` +
                                `--------------------%0A%0A`;
            });
            
            window.open(`https://api.whatsapp.com/send?text=${reportText}`, '_blank');
        });


        // Initial setup
        const appTitleEl = document.getElementById('app-title');
        const appSloganEl = document.getElementById('app-slogan');
        const settings = getAppSettings();
        appTitleEl.textContent = settings.title;
        appSloganEl.textContent = settings.slogan;

        appTitleEl.addEventListener('blur', () => {
            const currentSettings = getAppSettings();
            currentSettings.title = appTitleEl.textContent;
            setAppSettings(currentSettings);
        });
        appSloganEl.addEventListener('blur', () => {
            const currentSettings = getAppSettings();
            currentSettings.slogan = appSloganEl.textContent;
            setAppSettings(currentSettings);
        });

        // Photo functionality
        takePhotoBtn.addEventListener('click', () => photoInput.click());
        removePhotoBtn.addEventListener('click', () => {
            photoInput.value = '';
            photoDataInput.value = '';
            photoPreview.src = '';
            photoPreview.classList.add('hidden');
            removePhotoBtn.classList.add('hidden');
        });

        photoInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (event) => {
                    photoDataInput.value = event.target.result;
                    photoPreview.src = event.target.result;
                    photoPreview.classList.remove('hidden');
                    removePhotoBtn.classList.remove('hidden');
                };
                reader.readAsDataURL(file);
            }
        });

        populatePlansDropdown();
        renderCustomers();
    });
    </script>
</body>
</html>

